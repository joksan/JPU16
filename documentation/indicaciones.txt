Indicaciones generales
----------------------
- Antes de usar el procesador, se recomienda compilar e instalar el ensamblador (ver el archivo
  "leeme" en el directorio "jpu16asm"), para poder crear programas con el.
- Para obtener la ayuda de invocacion del ensamblador, ejecute "jpu16asm" sin argumentos.

Pasos para correr el programa de ejemplo
----------------------------------------
El directorio "programa_ejemplo" cuenta con varios archivos de ejemplo para correr un simple demo
de LEDs parpadeantes en una tarjeta Papilio One (version de 500K compuertas). Los LED se conectan
al puerto A de la misma, por lo que se incluye tambien un archivo .ucf para definir sus conexiones.
Los pasos a seguir son los siguientes:

- Descomprimir los archivos a un directorio de la PC.
- Crear un proyecto con el Project Navigator de ISE en un directorio llamado "Proyecto_ISE" junto
  a los archivos extraidos.
- Agregar al proyecto los archivos siguientes (no es necesario hacer copias):
  JPU16_src/JPU16.vhd
  JPU16_src/JPU16_ALU.vhd
  JPU16_src/JPU16_BUSES.vhd
  JPU16_src/JPU16_CU.vhd
  JPU16_src/JPU16_DEFS.vhd
  JPU16_src/JPU16_REGS.vhd
  programa_ejemplo/Sistema_Ejemplo.vhd
  programa_ejemplo/Sistema_Ejemplo.ucf
  (Nota: el archivo JPU16_src/JPU16_TEST_BENCH.vhd es opcional, y sirve para simular el procesador)
- Correr el makefile de ejemplo que viene con el programa para generar los archivos con las
  definiciones de la memoria en formato VHDL:
  $make codigo_hdl
- Agregar los archivos generados al proyecto de ISE (tampoco es necesario hacer copias):
  programa_ejemplo/JPU16_MEM.vhd
  programa_ejemplo/Mapa_Memoria.bmm
- Realizar el proceso de sintesis completa mediante ISE
- Subir el bitfile generado al FPGA mediante el comando
  $sudo papilio-prog -f Sistema_Ejemplo.bit

Para actualizar el FPGA con las modificaciones hechas al programa sin necesidad de hacer sintesis,
seguir los siguientes pasos:

- Generar el archivo Sistema_Reprogramado.bit corriendo make sin argumentos:
  $make
- Subir el bitfile generado al FPGA mediante el comando
  $sudo papilio-prog -f Sistema_Reprogramado.bit

Nota: Existe la posibilidad de tener que ajustar algunas de las rutas o nombres definidos al
principio del makefile en caso que existan errores. En particular, podria ser necesario redefinir
la ruta de instalacion del script de configuracion de ISE, definido en la variable nombrada
"config_ise", sobretodo si se usa una version mas reciente del software.

Pasos para crear proyectos con JPU16
------------------------------------
- Descomprimir los archivos a un directorio.
- Crear un proyecto con el Project Navigator de ISE (preferiblemente en un directorio contiguo a
  los archivos extraidos).
- Agregar al proyecto los archivos siguientes (no es necesario hacer copias):
  JPU16_src/JPU16.vhd
  JPU16_src/JPU16_ALU.vhd
  JPU16_src/JPU16_BUSES.vhd
  JPU16_src/JPU16_CU.vhd
  JPU16_src/JPU16_DEFS.vhd
  JPU16_src/JPU16_REGS.vhd
  (Nota: el archivo JPU16_src/JPU16_TEST_BENCH.vhd es opcional, y sirve para simular el procesador)
- Crear la definicion del sistema completo en VHDL y agregarla al proyecto. La misma debe abarcar
  al procesador con el nombre "CPU" y ser de tipo "JPU16". Vease el archivo "Sistema_Ejemplo.vhd"
  dentro del directorio "programa_ejemplo" para mas detalles.
  NOTA: Es necesario asegurarse de que la entidad principal del proyecto es el sistema completo y
  no el procesador mismo, caso contrario podran ocurrir errores.
- Crear un programa en ensamblador y guardarlo con extension .asm, preferiblemente en un directorio
  contiguo (pero separado) a los directorios del procesador y el proyecto de ISE para mantener el
  orden.
- Correr el ensamblador para crear los archivos complementarios del procesador a partir del .asm
  $jpu16asm programa.asm -vr definicion_memoria.vhd -b mapa_memoria.bmm
- Agregar los archivos .vhd y .bmm generados al proyecto de ISE. Notese que para el archivo .bmm
  ISE crea un archivo extra con las letras "_bd" agregadas antes de la extension (ejemplo:
  mapa_memoria_bd.bmm). Este archivo contiene las locaciones fisicas de los bloques de RAM y es
  util para actualizar bitfiles con programas nuevos.
- Llevar a cabo una sintesis completa del procesador y descargar la configuracion a un FPGA para
  correr el programa.

Pasos para actualizar los programas hechos con JPU16 (sin realizar sintesis)
----------------------------------------------------------------------------
- Usar el ensamblador para crear un archivo .mem a partir del codigo fuente actualizado:
  $jpu16asm programa.asm -m datos.mem
- Sobreponer los datos del archivo .mem al bitfile:
  $data2mem -bd datos.mem -bt bitfile_original.bit -bm mapa_memoria_bd.bmm -o b nuevo_bitfile.bit
- Descargar la nueva configuracion al FPGA.